// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/containerd/containerd/pkg/cri/server/imageverifier/v1/image_verifier.proto

package imageverifier

import (
	context "context"
	fmt "fmt"
	github_com_containerd_ttrpc "github.com/containerd/ttrpc"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VerifyImageRequest struct {
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageDigest          string   `protobuf:"bytes,2,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyImageRequest) Reset()      { *m = VerifyImageRequest{} }
func (*VerifyImageRequest) ProtoMessage() {}
func (*VerifyImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba7a39906d8d3a30, []int{0}
}
func (m *VerifyImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyImageRequest.Merge(m, src)
}
func (m *VerifyImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyImageRequest proto.InternalMessageInfo

type VerifyImageResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyImageResponse) Reset()      { *m = VerifyImageResponse{} }
func (*VerifyImageResponse) ProtoMessage() {}
func (*VerifyImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba7a39906d8d3a30, []int{1}
}
func (m *VerifyImageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyImageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyImageResponse.Merge(m, src)
}
func (m *VerifyImageResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyImageResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VerifyImageRequest)(nil), "containerd.cri.imageverifier.VerifyImageRequest")
	proto.RegisterType((*VerifyImageResponse)(nil), "containerd.cri.imageverifier.VerifyImageResponse")
}

func init() {
	proto.RegisterFile("github.com/containerd/containerd/pkg/cri/server/imageverifier/v1/image_verifier.proto", fileDescriptor_ba7a39906d8d3a30)
}

var fileDescriptor_ba7a39906d8d3a30 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x0a, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcc, 0xcc, 0x4b, 0x2d,
	0x4a, 0x41, 0x66, 0x16, 0x64, 0xa7, 0xeb, 0x27, 0x17, 0x65, 0xea, 0x17, 0xa7, 0x16, 0x95, 0xa5,
	0x16, 0xe9, 0x67, 0xe6, 0x26, 0xa6, 0xa7, 0x96, 0xa5, 0x16, 0x65, 0xa6, 0x65, 0xa6, 0x16, 0xe9,
	0x97, 0x19, 0x42, 0x04, 0xe2, 0x61, 0x22, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x32, 0x08,
	0x03, 0xf4, 0x92, 0x8b, 0x32, 0xf5, 0x50, 0x74, 0x29, 0x85, 0x71, 0x09, 0x85, 0x81, 0xd8, 0x95,
	0x9e, 0x20, 0xe1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x59, 0x2e, 0x2e, 0x88, 0x59,
	0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x9c, 0x60, 0x11, 0xbf, 0xc4,
	0xdc, 0x54, 0x21, 0x45, 0x2e, 0x1e, 0x88, 0x74, 0x4a, 0x66, 0x7a, 0x6a, 0x71, 0x89, 0x04, 0x13,
	0x58, 0x01, 0x37, 0x58, 0xcc, 0x05, 0x2c, 0xa4, 0x64, 0xcb, 0x25, 0x8c, 0x62, 0x6e, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0xaa, 0x10, 0x1f, 0x17, 0x53, 0x7e, 0x36, 0xd8, 0x40, 0x8e, 0x20, 0xa6, 0xfc,
	0x6c, 0x21, 0x31, 0x2e, 0xb6, 0xa2, 0xd4, 0xc4, 0xe2, 0xfc, 0x3c, 0xa8, 0x19, 0x50, 0x9e, 0x51,
	0x33, 0x23, 0x17, 0x2f, 0x58, 0x67, 0x18, 0xd4, 0xa1, 0x42, 0x45, 0x5c, 0xdc, 0x48, 0x06, 0x0a,
	0x19, 0xe8, 0xe1, 0xf3, 0x96, 0x1e, 0xa6, 0x9f, 0xa4, 0x0c, 0x49, 0xd0, 0x01, 0x71, 0xad, 0x53,
	0xc6, 0x89, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x34, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48,
	0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0xa3, 0xfc, 0x28, 0x8d, 0x2b, 0x6b,
	0x14, 0x81, 0x24, 0x36, 0x70, 0x5c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31, 0x86, 0xa7,
	0x34, 0x04, 0x02, 0x00, 0x00,
}

func (m *VerifyImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageDigest) > 0 {
		i -= len(m.ImageDigest)
		copy(dAtA[i:], m.ImageDigest)
		i = encodeVarintImageVerifier(dAtA, i, uint64(len(m.ImageDigest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintImageVerifier(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyImageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyImageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyImageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImageVerifier(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintImageVerifier(dAtA []byte, offset int, v uint64) int {
	offset -= sovImageVerifier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerifyImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovImageVerifier(uint64(l))
	}
	l = len(m.ImageDigest)
	if l > 0 {
		n += 1 + l + sovImageVerifier(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyImageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImageVerifier(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImageVerifier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImageVerifier(x uint64) (n int) {
	return sovImageVerifier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VerifyImageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyImageRequest{`,
		`ImageName:` + fmt.Sprintf("%v", this.ImageName) + `,`,
		`ImageDigest:` + fmt.Sprintf("%v", this.ImageDigest) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyImageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyImageResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringImageVerifier(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

type ImageVerifierService interface {
	VerifyImage(ctx context.Context, req *VerifyImageRequest) (*VerifyImageResponse, error)
}

func RegisterImageVerifierService(srv *github_com_containerd_ttrpc.Server, svc ImageVerifierService) {
	srv.Register("containerd.cri.imageverifier.ImageVerifier", map[string]github_com_containerd_ttrpc.Method{
		"VerifyImage": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req VerifyImageRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.VerifyImage(ctx, &req)
		},
	})
}

type imageVerifierClient struct {
	client *github_com_containerd_ttrpc.Client
}

func NewImageVerifierClient(client *github_com_containerd_ttrpc.Client) ImageVerifierService {
	return &imageVerifierClient{
		client: client,
	}
}

func (c *imageVerifierClient) VerifyImage(ctx context.Context, req *VerifyImageRequest) (*VerifyImageResponse, error) {
	var resp VerifyImageResponse
	if err := c.client.Call(ctx, "containerd.cri.imageverifier.ImageVerifier", "VerifyImage", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
func (m *VerifyImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageVerifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageVerifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageVerifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImageVerifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageVerifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageVerifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImageVerifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageVerifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageVerifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyImageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageVerifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyImageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyImageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageVerifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageVerifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageVerifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImageVerifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageVerifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageVerifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageVerifier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageVerifier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageVerifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageVerifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImageVerifier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImageVerifier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImageVerifier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImageVerifier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageVerifier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImageVerifier = fmt.Errorf("proto: unexpected end of group")
)
